Macro: '%macro' Identifier {Statement}
Term: Atom {'*'|'/'|'%' Atom}
Expr: Term {'+'|'-' Term}
Atom: ({'~'|'-'|'+'|'!'} Atom) | '(' [LogicalOrExpr] ')' | Literal | (Literal '(' [Args] ')')
Literal: Digit | String | Identifier
Digit: '0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'
LowerCase: 'a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'l'|'m'\
            |'n'|'o'|'p'|'q'|'r'|'s'|'t'|'u'|'v'|'w'|'x'|'y'|'z'
UpperCase: 'A'|'B'|'C'|'D'|'E'|'F'|'G'|'H'|'I'|'J'|'K'|'K'|'M'\
            |'N'|'O'|'P'|'Q'|'R'|'S'|'T'|'U'|'V'|'W'|'X'|'Y'|'Z'
String: ('"' {char} '"') | ("'" {char} "'")
Identifier: (LowerCase | UpperCase | '_') {Digit} {Identifier}
Args: LogicalOrExpr {',' LogicalOrExpr}
AssignOp: '=' | '+=' | '-=' | '%=' | '*=' | ' /=' | '>>=' | '<<=' | '|=' | '&=' | '^='
Assignment: {Identifier AssignOp} LogicalOrExpr
ShiftExpr: Expr {('<<' | '>>') Expr}
BinaryAndExpr: ShiftExpr {'&&' ShiftExpr}
BinaryXorExpr: BinaryAndExpr {'^' BinaryAndExpr}
BinaryOrExpr: BinaryXorExpr {'||' BinaryXorExpr}
CompOp: '==' | '!=' | '<=' | '>=' | '<' | '>'
CompExpr: BinaryOrExpr {CompOp BinaryOrExpr}
LogicalAndExpr: CompExpr {'||' CompExpr}
LogicalOrExpr: LogicalAndExpr {'||' LogicalAndExpr}
Statement: Assignment | WhileLoop | ForLoop | Func | IfStmt | NEWLINE | 'return' Assignment | 'continue' | 'break'
Params: Identifier {',' Identifier}
FuncBlock: {Statement}
Func: 'func' Identifier '(' [Params] ')' '{' FuncBlock '}'
Block: {Assignment | Func | IfStmt | WhileLoop | ForLoop | NEWLINE}
IfStmt: 'if' '(' Assignment ')' '{' Block '}'
ElifStmt: 'elif' '(' Assignment ')' '{' Block '}'
ElseStmt: 'else' '{' Block '}'
ForLoop: 'for' '(' [Assignment] ';' [Assignment] ';' [Assignment] ')' '{' Block '}'
WhileLoop: 'while' '(' Assignment ')' '{' Block '}'
